<<<<<<< HEAD
definitions:
  dto.CategoryResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CitizenCardResponse:
    properties:
      citizenId:
        type: string
      expireDate:
        type: string
      laserId:
        type: string
      picture:
        type: string
    type: object
  dto.HttpResponse:
    properties:
      error:
        type: string
      result: {}
    type: object
  dto.LoginRequest:
    properties:
      idToken:
        type: string
      provider:
        description: GOOGLE
        type: string
    required:
    - idToken
    - provider
    type: object
  dto.MediaResponse:
    properties:
      id:
        type: integer
      pictureUrl:
        type: string
    type: object
  dto.PackageListResponse:
    properties:
      pagination:
        $ref: '#/definitions/dto.PaginationResponse'
      response:
        items:
          $ref: '#/definitions/dto.PackageResponse'
        type: array
    type: object
  dto.PackageResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/dto.CategoryResponse'
        type: array
      description:
        type: string
      id:
        type: integer
      media:
        items:
          $ref: '#/definitions/dto.MediaResponse'
        type: array
      name:
        type: string
      photographer:
        $ref: '#/definitions/dto.PhotographerResponse'
      price:
        type: number
      quotations:
        items:
          $ref: '#/definitions/dto.QuotationResponse'
        type: array
      reviews:
        items:
          $ref: '#/definitions/dto.ReviewResponse'
        type: array
      tags:
        items:
          $ref: '#/definitions/dto.TagResponse'
        type: array
    type: object
  dto.PaginationResponse:
    properties:
      has_next_page:
        type: boolean
      has_prev_page:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.PhotographerResponse:
    properties:
      active_status:
        type: boolean
      id:
        type: integer
      is_verified:
        type: boolean
    type: object
  dto.QuotationResponse:
    properties:
      customer:
        type: string
      id:
        type: integer
      price:
        type: number
      status:
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  dto.RegisterRequest:
    properties:
      idToken:
        type: string
      provider:
        description: GOOGLE
        type: string
      role:
        description: CUSTOMER, PHOTOGRAPHER, ADMIN
        type: string
    required:
    - idToken
    - provider
    - role
    type: object
  dto.RegisterResponse:
    properties:
      accessToken:
        type: string
      exp:
        type: integer
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.ReviewResponse:
    properties:
      comment:
        type: string
      customer:
        type: string
      id:
        type: integer
      rating:
        type: number
    type: object
  dto.TagResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dto.TokenResponse:
    properties:
      accessToken:
        type: string
      exp:
        type: integer
      refreshToken:
        type: string
    type: object
  dto.UserResponse:
    properties:
      accountNo:
        type: string
      bank:
        type: string
      bankBranch:
        type: string
      email:
        type: string
      facebook:
        type: string
      id:
        type: integer
      instagram:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
      profilePictureUrl:
        type: string
      role:
        type: string
    type: object
=======
components:
  schemas:
    dto.CitizenCardResponse:
      properties:
        citizenId:
          type: string
        expireDate:
          type: string
        laserId:
          type: string
        picture:
          type: string
      type: object
    dto.CreateGalleryRequest:
      properties:
        description:
          type: string
        media:
          items:
            $ref: '#/components/schemas/dto.MediaGalleryRequest'
          type: array
          uniqueItems: false
        name:
          type: string
        price:
          type: number
      required:
      - description
      - media
      - name
      - price
      type: object
    dto.HttpError:
      properties:
        error:
          type: string
      type: object
    dto.HttpResponse-dto_CitizenCardResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.CitizenCardResponse'
      type: object
    dto.HttpResponse-dto_LoginResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.LoginResponse'
      type: object
    dto.HttpResponse-dto_ObjectUploadResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.ObjectUploadResponse'
      type: object
    dto.HttpResponse-dto_RegisterResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.RegisterResponse'
      type: object
    dto.HttpResponse-dto_TokenResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.TokenResponse'
      type: object
    dto.HttpResponse-dto_UserResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.UserResponse'
      type: object
    dto.LoginRequest:
      properties:
        idToken:
          type: string
        provider:
          description: GOOGLE
          type: string
      required:
      - idToken
      - provider
      type: object
    dto.LoginResponse:
      properties:
        accessToken:
          type: string
        exp:
          type: integer
        refreshToken:
          type: string
        user:
          $ref: '#/components/schemas/dto.UserResponse'
      type: object
    dto.MediaGalleryRequest:
      properties:
        description:
          type: string
        pictureUrl:
          type: string
      required:
      - pictureUrl
      type: object
    dto.ObjectUploadResponse:
      properties:
        url:
          type: string
      type: object
    dto.RefreshTokenRequest:
      properties:
        refreshToken:
          type: string
      required:
      - refreshToken
      type: object
    dto.RegisterRequest:
      properties:
        idToken:
          type: string
        provider:
          description: GOOGLE
          type: string
        role:
          description: CUSTOMER, PHOTOGRAPHER, ADMIN
          type: string
      required:
      - idToken
      - provider
      - role
      type: object
    dto.RegisterResponse:
      properties:
        accessToken:
          type: string
        exp:
          type: integer
        refreshToken:
          type: string
        user:
          $ref: '#/components/schemas/dto.UserResponse'
      type: object
    dto.TokenResponse:
      properties:
        accessToken:
          type: string
        exp:
          type: integer
        refreshToken:
          type: string
      type: object
    dto.UserResponse:
      properties:
        accountNo:
          type: string
        bank:
          type: string
        bankBranch:
          type: string
        email:
          type: string
        facebook:
          type: string
        id:
          type: integer
        instagram:
          type: string
        name:
          type: string
        phoneNumber:
          type: string
        profilePictureUrl:
          type: string
        role:
          type: string
      type: object
  securitySchemes:
    "@securitydefinitions.apikey\tApiKeyAuth":
      in: header
      name: Authorization
      type: apiKey
externalDocs:
  description: ""
  url: ""
>>>>>>> main
info:
  description: Pic Me Pls API Documentation
  title: Pic Me Pls API
  version: "0.1"
openapi: 3.1.0
paths:
  /api/v1/auth/login:
    post:
      description: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.LoginRequest'
        description: request request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_LoginResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      summary: Login
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      description: Logout
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - auth
  /api/v1/auth/refresh-token:
    post:
      description: Refresh Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.RefreshTokenRequest'
        description: request request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_TokenResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      summary: Refresh Token
      tags:
      - auth
  /api/v1/auth/register:
    post:
<<<<<<< HEAD
      description: register
      parameters:
      - description: request request
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.HttpResponse'
            - properties:
                result:
                  $ref: '#/definitions/dto.RegisterResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HttpResponse'
      summary: register
      tags:
      - auth
=======
      description: Register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.RegisterRequest'
        description: request request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_RegisterResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      summary: Register
      tags:
      - auth
  /api/v1/gallery:
    post:
      description: Create gallery by photographer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.CreateGalleryRequest'
        description: Gallery details
        required: true
      responses:
        "201":
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create gallery
      tags:
      - gallery
>>>>>>> main
  /api/v1/me:
    get:
      description: Get me
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_UserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - user
    patch:
      description: Update user's profile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
        description: Bank Branch
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_UserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update me
      tags:
      - user
<<<<<<< HEAD
  /api/v1/package:
    get:
      description: Show all avaliable packages with pagination
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default is 20)
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.HttpResponse'
            - properties:
                result:
                  $ref: '#/definitions/dto.PackageListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HttpResponse'
      summary: Get all packages
      tags:
      - Package
=======
  /api/v1/objects:
    delete:
      description: Delete image
      parameters:
      - description: image url
        in: query
        name: URL
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      summary: Delete image
      tags:
      - objects
    post:
      description: receive formData body, path (string, folder path, don't include
        ".." or prefix with "/") and file
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
        description: folder enum (GALLERY, VERIFY_CITIZENCARD, PROFILE_IMAGE)
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_ObjectUploadResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      summary: Upload image
      tags:
      - objects
>>>>>>> main
  /api/v1/photographer/citizen-card:
    get:
      description: Get Photographer Citizen Card
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_CitizenCardResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get Citizen Card
      tags:
      - photographer
  /api/v1/photographer/reverify:
    patch:
      description: Reverify Photographer Citizen Card
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
        description: Expire Date
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_CitizenCardResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Reverify Citizen Card
      tags:
      - photographer
  /api/v1/photographer/verify:
    post:
      description: Verify Photographer Citizen Card
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
        description: Expire Date
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_CitizenCardResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Verify Citizen Card
      tags:
      - photographer
